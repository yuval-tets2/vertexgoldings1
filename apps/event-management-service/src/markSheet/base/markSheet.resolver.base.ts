/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMarkSheetArgs } from "./CreateMarkSheetArgs";
import { UpdateMarkSheetArgs } from "./UpdateMarkSheetArgs";
import { DeleteMarkSheetArgs } from "./DeleteMarkSheetArgs";
import { MarkSheetCountArgs } from "./MarkSheetCountArgs";
import { MarkSheetFindManyArgs } from "./MarkSheetFindManyArgs";
import { MarkSheetFindUniqueArgs } from "./MarkSheetFindUniqueArgs";
import { MarkSheet } from "./MarkSheet";
import { Course } from "../../course/base/Course";
import { Student } from "../../student/base/Student";
import { MarkSheetService } from "../markSheet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MarkSheet)
export class MarkSheetResolverBase {
  constructor(
    protected readonly service: MarkSheetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MarkSheet",
    action: "read",
    possession: "any",
  })
  async _markSheetsMeta(
    @graphql.Args() args: MarkSheetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MarkSheet])
  @nestAccessControl.UseRoles({
    resource: "MarkSheet",
    action: "read",
    possession: "any",
  })
  async markSheets(
    @graphql.Args() args: MarkSheetFindManyArgs
  ): Promise<MarkSheet[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MarkSheet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MarkSheet",
    action: "read",
    possession: "own",
  })
  async markSheet(
    @graphql.Args() args: MarkSheetFindUniqueArgs
  ): Promise<MarkSheet | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MarkSheet)
  @nestAccessControl.UseRoles({
    resource: "MarkSheet",
    action: "create",
    possession: "any",
  })
  async createMarkSheet(
    @graphql.Args() args: CreateMarkSheetArgs
  ): Promise<MarkSheet> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        course: {
          connect: args.data.course,
        },

        student: {
          connect: args.data.student,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MarkSheet)
  @nestAccessControl.UseRoles({
    resource: "MarkSheet",
    action: "update",
    possession: "any",
  })
  async updateMarkSheet(
    @graphql.Args() args: UpdateMarkSheetArgs
  ): Promise<MarkSheet | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          course: {
            connect: args.data.course,
          },

          student: {
            connect: args.data.student,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MarkSheet)
  @nestAccessControl.UseRoles({
    resource: "MarkSheet",
    action: "delete",
    possession: "any",
  })
  async deleteMarkSheet(
    @graphql.Args() args: DeleteMarkSheetArgs
  ): Promise<MarkSheet | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async resolveFieldCourse(
    @graphql.Parent() parent: MarkSheet
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async resolveFieldStudent(
    @graphql.Parent() parent: MarkSheet
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
