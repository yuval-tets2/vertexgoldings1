/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAdmissionBatchArgs } from "./CreateAdmissionBatchArgs";
import { UpdateAdmissionBatchArgs } from "./UpdateAdmissionBatchArgs";
import { DeleteAdmissionBatchArgs } from "./DeleteAdmissionBatchArgs";
import { AdmissionBatchCountArgs } from "./AdmissionBatchCountArgs";
import { AdmissionBatchFindManyArgs } from "./AdmissionBatchFindManyArgs";
import { AdmissionBatchFindUniqueArgs } from "./AdmissionBatchFindUniqueArgs";
import { AdmissionBatch } from "./AdmissionBatch";
import { AdmissionFormFindManyArgs } from "../../admissionForm/base/AdmissionFormFindManyArgs";
import { AdmissionForm } from "../../admissionForm/base/AdmissionForm";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { AdmissionBatchService } from "../admissionBatch.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AdmissionBatch)
export class AdmissionBatchResolverBase {
  constructor(
    protected readonly service: AdmissionBatchService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AdmissionBatch",
    action: "read",
    possession: "any",
  })
  async _admissionBatchesMeta(
    @graphql.Args() args: AdmissionBatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AdmissionBatch])
  @nestAccessControl.UseRoles({
    resource: "AdmissionBatch",
    action: "read",
    possession: "any",
  })
  async admissionBatches(
    @graphql.Args() args: AdmissionBatchFindManyArgs
  ): Promise<AdmissionBatch[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AdmissionBatch, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AdmissionBatch",
    action: "read",
    possession: "own",
  })
  async admissionBatch(
    @graphql.Args() args: AdmissionBatchFindUniqueArgs
  ): Promise<AdmissionBatch | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdmissionBatch)
  @nestAccessControl.UseRoles({
    resource: "AdmissionBatch",
    action: "create",
    possession: "any",
  })
  async createAdmissionBatch(
    @graphql.Args() args: CreateAdmissionBatchArgs
  ): Promise<AdmissionBatch> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdmissionBatch)
  @nestAccessControl.UseRoles({
    resource: "AdmissionBatch",
    action: "update",
    possession: "any",
  })
  async updateAdmissionBatch(
    @graphql.Args() args: UpdateAdmissionBatchArgs
  ): Promise<AdmissionBatch | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdmissionBatch)
  @nestAccessControl.UseRoles({
    resource: "AdmissionBatch",
    action: "delete",
    possession: "any",
  })
  async deleteAdmissionBatch(
    @graphql.Args() args: DeleteAdmissionBatchArgs
  ): Promise<AdmissionBatch | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AdmissionForm], { name: "admissionForm" })
  @nestAccessControl.UseRoles({
    resource: "AdmissionForm",
    action: "read",
    possession: "any",
  })
  async resolveFieldAdmissionForm(
    @graphql.Parent() parent: AdmissionBatch,
    @graphql.Args() args: AdmissionFormFindManyArgs
  ): Promise<AdmissionForm[]> {
    const results = await this.service.findAdmissionForm(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Course], { name: "courses" })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async resolveFieldCourses(
    @graphql.Parent() parent: AdmissionBatch,
    @graphql.Args() args: CourseFindManyArgs
  ): Promise<Course[]> {
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
