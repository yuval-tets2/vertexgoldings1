/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCourseArgs } from "./CreateCourseArgs";
import { UpdateCourseArgs } from "./UpdateCourseArgs";
import { DeleteCourseArgs } from "./DeleteCourseArgs";
import { CourseCountArgs } from "./CourseCountArgs";
import { CourseFindManyArgs } from "./CourseFindManyArgs";
import { CourseFindUniqueArgs } from "./CourseFindUniqueArgs";
import { Course } from "./Course";
import { AdmissionBatchFindManyArgs } from "../../admissionBatch/base/AdmissionBatchFindManyArgs";
import { AdmissionBatch } from "../../admissionBatch/base/AdmissionBatch";
import { AdmissionCriterionFindManyArgs } from "../../admissionCriterion/base/AdmissionCriterionFindManyArgs";
import { AdmissionCriterion } from "../../admissionCriterion/base/AdmissionCriterion";
import { AdmissionFormFindManyArgs } from "../../admissionForm/base/AdmissionFormFindManyArgs";
import { AdmissionForm } from "../../admissionForm/base/AdmissionForm";
import { MarkSheetFindManyArgs } from "../../markSheet/base/MarkSheetFindManyArgs";
import { MarkSheet } from "../../markSheet/base/MarkSheet";
import { Department } from "../../department/base/Department";
import { Faculty } from "../../faculty/base/Faculty";
import { University } from "../../university/base/University";
import { CourseService } from "../course.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Course)
export class CourseResolverBase {
  constructor(
    protected readonly service: CourseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async _coursesMeta(
    @graphql.Args() args: CourseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Course])
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async courses(@graphql.Args() args: CourseFindManyArgs): Promise<Course[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Course, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "own",
  })
  async course(
    @graphql.Args() args: CourseFindUniqueArgs
  ): Promise<Course | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Course)
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "create",
    possession: "any",
  })
  async createCourse(@graphql.Args() args: CreateCourseArgs): Promise<Course> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        department: {
          connect: args.data.department,
        },

        faculty: args.data.faculty
          ? {
              connect: args.data.faculty,
            }
          : undefined,

        university: {
          connect: args.data.university,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Course)
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "update",
    possession: "any",
  })
  async updateCourse(
    @graphql.Args() args: UpdateCourseArgs
  ): Promise<Course | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          department: {
            connect: args.data.department,
          },

          faculty: args.data.faculty
            ? {
                connect: args.data.faculty,
              }
            : undefined,

          university: {
            connect: args.data.university,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Course)
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "delete",
    possession: "any",
  })
  async deleteCourse(
    @graphql.Args() args: DeleteCourseArgs
  ): Promise<Course | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AdmissionBatch], { name: "admissionBatches" })
  @nestAccessControl.UseRoles({
    resource: "AdmissionBatch",
    action: "read",
    possession: "any",
  })
  async resolveFieldAdmissionBatches(
    @graphql.Parent() parent: Course,
    @graphql.Args() args: AdmissionBatchFindManyArgs
  ): Promise<AdmissionBatch[]> {
    const results = await this.service.findAdmissionBatches(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AdmissionCriterion], {
    name: "admissionCriteria",
  })
  @nestAccessControl.UseRoles({
    resource: "AdmissionCriterion",
    action: "read",
    possession: "any",
  })
  async resolveFieldAdmissionCriteria(
    @graphql.Parent() parent: Course,
    @graphql.Args() args: AdmissionCriterionFindManyArgs
  ): Promise<AdmissionCriterion[]> {
    const results = await this.service.findAdmissionCriteria(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AdmissionForm], { name: "admissionForm" })
  @nestAccessControl.UseRoles({
    resource: "AdmissionForm",
    action: "read",
    possession: "any",
  })
  async resolveFieldAdmissionForm(
    @graphql.Parent() parent: Course,
    @graphql.Args() args: AdmissionFormFindManyArgs
  ): Promise<AdmissionForm[]> {
    const results = await this.service.findAdmissionForm(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MarkSheet], { name: "markSheet" })
  @nestAccessControl.UseRoles({
    resource: "MarkSheet",
    action: "read",
    possession: "any",
  })
  async resolveFieldMarkSheet(
    @graphql.Parent() parent: Course,
    @graphql.Args() args: MarkSheetFindManyArgs
  ): Promise<MarkSheet[]> {
    const results = await this.service.findMarkSheet(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Department, {
    nullable: true,
    name: "department",
  })
  @nestAccessControl.UseRoles({
    resource: "Department",
    action: "read",
    possession: "any",
  })
  async resolveFieldDepartment(
    @graphql.Parent() parent: Course
  ): Promise<Department | null> {
    const result = await this.service.getDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Faculty, {
    nullable: true,
    name: "faculty",
  })
  @nestAccessControl.UseRoles({
    resource: "Faculty",
    action: "read",
    possession: "any",
  })
  async resolveFieldFaculty(
    @graphql.Parent() parent: Course
  ): Promise<Faculty | null> {
    const result = await this.service.getFaculty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => University, {
    nullable: true,
    name: "university",
  })
  @nestAccessControl.UseRoles({
    resource: "University",
    action: "read",
    possession: "any",
  })
  async resolveFieldUniversity(
    @graphql.Parent() parent: Course
  ): Promise<University | null> {
    const result = await this.service.getUniversity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
