/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsDate,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { AdmissionFormUpdateManyWithoutStudentsInput } from "./AdmissionFormUpdateManyWithoutStudentsInput";
import { EnumStudentGender } from "./EnumStudentGender";
import { MarkSheetUpdateManyWithoutStudentsInput } from "./MarkSheetUpdateManyWithoutStudentsInput";
import { UniversityWhereUniqueInput } from "../../university/base/UniversityWhereUniqueInput";

@InputType()
class StudentUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  address?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  admissionDate?: Date;

  @ApiProperty({
    required: false,
    type: () => AdmissionFormUpdateManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => AdmissionFormUpdateManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => AdmissionFormUpdateManyWithoutStudentsInput, {
    nullable: true,
  })
  admissionForm?: AdmissionFormUpdateManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateOfBirth?: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string;

  @ApiProperty({
    required: false,
    enum: EnumStudentGender,
  })
  @IsEnum(EnumStudentGender)
  @IsOptional()
  @Field(() => EnumStudentGender, {
    nullable: true,
  })
  gender?: "MALE" | "FEMALE" | "OTHER";

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string;

  @ApiProperty({
    required: false,
    type: () => MarkSheetUpdateManyWithoutStudentsInput,
  })
  @ValidateNested()
  @Type(() => MarkSheetUpdateManyWithoutStudentsInput)
  @IsOptional()
  @Field(() => MarkSheetUpdateManyWithoutStudentsInput, {
    nullable: true,
  })
  markSheet?: MarkSheetUpdateManyWithoutStudentsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phone?: string | null;

  @ApiProperty({
    required: false,
    type: () => UniversityWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UniversityWhereUniqueInput)
  @IsOptional()
  @Field(() => UniversityWhereUniqueInput, {
    nullable: true,
  })
  university?: UniversityWhereUniqueInput;
}

export { StudentUpdateInput as StudentUpdateInput };
