/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAdmissionFormArgs } from "./CreateAdmissionFormArgs";
import { UpdateAdmissionFormArgs } from "./UpdateAdmissionFormArgs";
import { DeleteAdmissionFormArgs } from "./DeleteAdmissionFormArgs";
import { AdmissionFormCountArgs } from "./AdmissionFormCountArgs";
import { AdmissionFormFindManyArgs } from "./AdmissionFormFindManyArgs";
import { AdmissionFormFindUniqueArgs } from "./AdmissionFormFindUniqueArgs";
import { AdmissionForm } from "./AdmissionForm";
import { AdmissionBatch } from "../../admissionBatch/base/AdmissionBatch";
import { Course } from "../../course/base/Course";
import { Student } from "../../student/base/Student";
import { AdmissionFormService } from "../admissionForm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AdmissionForm)
export class AdmissionFormResolverBase {
  constructor(
    protected readonly service: AdmissionFormService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AdmissionForm",
    action: "read",
    possession: "any",
  })
  async _admissionFormsMeta(
    @graphql.Args() args: AdmissionFormCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AdmissionForm])
  @nestAccessControl.UseRoles({
    resource: "AdmissionForm",
    action: "read",
    possession: "any",
  })
  async admissionForms(
    @graphql.Args() args: AdmissionFormFindManyArgs
  ): Promise<AdmissionForm[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AdmissionForm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AdmissionForm",
    action: "read",
    possession: "own",
  })
  async admissionForm(
    @graphql.Args() args: AdmissionFormFindUniqueArgs
  ): Promise<AdmissionForm | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdmissionForm)
  @nestAccessControl.UseRoles({
    resource: "AdmissionForm",
    action: "create",
    possession: "any",
  })
  async createAdmissionForm(
    @graphql.Args() args: CreateAdmissionFormArgs
  ): Promise<AdmissionForm> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        admissionBatch: {
          connect: args.data.admissionBatch,
        },

        course: {
          connect: args.data.course,
        },

        student: {
          connect: args.data.student,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdmissionForm)
  @nestAccessControl.UseRoles({
    resource: "AdmissionForm",
    action: "update",
    possession: "any",
  })
  async updateAdmissionForm(
    @graphql.Args() args: UpdateAdmissionFormArgs
  ): Promise<AdmissionForm | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          admissionBatch: {
            connect: args.data.admissionBatch,
          },

          course: {
            connect: args.data.course,
          },

          student: {
            connect: args.data.student,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdmissionForm)
  @nestAccessControl.UseRoles({
    resource: "AdmissionForm",
    action: "delete",
    possession: "any",
  })
  async deleteAdmissionForm(
    @graphql.Args() args: DeleteAdmissionFormArgs
  ): Promise<AdmissionForm | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AdmissionBatch, {
    nullable: true,
    name: "admissionBatch",
  })
  @nestAccessControl.UseRoles({
    resource: "AdmissionBatch",
    action: "read",
    possession: "any",
  })
  async resolveFieldAdmissionBatch(
    @graphql.Parent() parent: AdmissionForm
  ): Promise<AdmissionBatch | null> {
    const result = await this.service.getAdmissionBatch(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async resolveFieldCourse(
    @graphql.Parent() parent: AdmissionForm
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async resolveFieldStudent(
    @graphql.Parent() parent: AdmissionForm
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
